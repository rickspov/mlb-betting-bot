# test_optimize.py
# Script de prueba para la funci√≥n de optimizaci√≥n de alineaciones DFS.
# Ejecuta la optimizaci√≥n y muestra un resumen limpio de los resultados.

from dfs_optimizer.optimize_lineup import optimize_lineup


def main():
    """
    Ejecuta la optimizaci√≥n de alineaci√≥n y muestra un resumen limpio de los resultados.
    Maneja casos de √©xito y fallo de forma clara.
    """
    # Ejecutar la optimizaci√≥n
    result = optimize_lineup()
    
    # Imprimir resumen limpio y bien formateado
    print("\n" + "="*60)
    print("RESUMEN DE OPTIMIZACI√ìN DFS")
    print("="*60)
    
    # Estado de la optimizaci√≥n
    print(f"Estado: {result['status']}")
    
    # Verificar si se encontr√≥ una soluci√≥n
    if result['mvp'] is None:
        print("\n‚ùå No se encontr√≥ una soluci√≥n factible.")
        print("   Verifica las restricciones y datos de entrada.")
    else:
        print("\n‚úÖ Optimizaci√≥n completada exitosamente")
        
        # MVP seleccionado
        print(f"\nüèÜ MVP: {result['mvp']}")
        
        # Jugadores utility numerados
        print(f"\nüë• Jugadores utility ({len(result['utility'])}):")
        for i, player in enumerate(result['utility'], 1):
            print(f"   {i}. {player}")
        
        # Salario total con formato en d√≥lares
        print(f"\nüí∞ Salario total: ${result['salary_used']:,}")
        
        # Puntos proyectados totales
        print(f"üìä Puntos proyectados: {result['projected_points']}")
    
    print("="*60)


if __name__ == "__main__":
    main() 